-- Grammar for Program: A sequence of definitions

PDefs. Program ::= [Def] ; 
terminator Def ""        ;

-- Grammar for Comments

comment "//"      ;
comment "/*" "*/" ;
comment "#"       ;

-- Grammar for Function Definition

DFuns. Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
separator Arg "," ;
terminator Stm "" ;

-- Grammar for Argument Declaration

ADecl. Arg ::= Type Id ;

-- Grammar for Expression

SExp. Stm ::= Exp ";"  ;

-- Grammar for One-variable Declaration

SDecl. Stm ::= Type Id ";"           ;
SDecls. Stm ::= Type Id "," [Id] ";" ;
SInit. Stm ::= Type Id "=" Exp ";"   ;
separator nonempty Id ","                    ;

-- Grammar for Statements

SReturn. Stm ::= "return" Exp ";"                ;
SWhile. Stm ::= "while" "(" Exp ")" Stm          ;
SBlock. Stm ::= "{" [Stm] "}"                    ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

-- Grammar for Expressions

EInt.    Exp6 ::= Integer ;
EDouble. Exp6 ::= Double  ;
ETrue.   Exp6 ::= "true"  ;
EFalse.  Exp6 ::= "false" ;
EId.     Exp6 ::= Id      ;

ECall.   Exp6 ::= Id "(" [Exp] ")" ;

EPIncr.  Exp6 ::= Id "++" ;
EPDecr.  Exp6 ::= Id "--" ;

EIncr.  Exp6 ::= "++" Id ;
EDecr.  Exp6 ::= "--" Id ;

EMul. Exp5 ::= Exp5 "*" Exp6 ; 
EDiv. Exp5 ::= Exp5 "/" Exp6 ;

EAdd. Exp4 ::= Exp4 "+" Exp5 ;
ESub. Exp4 ::= Exp4 "-" Exp5 ;

ELt. Exp3 ::= Exp4 "<" Exp4 ; 
EGt. Exp3 ::= Exp4 ">" Exp4 ;
ELEq. Exp3 ::= Exp4 "<=" Exp4 ;
EGEq. Exp3 ::= Exp4 ">=" Exp4 ;

EEq. Exp3 ::= Exp4 "==" Exp4 ;
ENEq. Exp3 ::= Exp4 "!=" Exp4 ;

EAnd. Exp2 ::= Exp2 "&&" Exp3 ;

EOr. Exp1 ::= Exp1 "||" Exp2 ;

EAss. Exp ::= Id "=" Exp ;
       
coercions Exp 6   ;
separator Exp "," ;

-- Grammar for Types

Tbool. Type ::= "bool"     ; 
Tdouble. Type ::= "double" ; 
Tint. Type ::= "int"       ;  
Tvoid. Type ::= "void"     ;

-- Grammar for Identifier

position token Id (letter (letter | digit | '_')*) ;
